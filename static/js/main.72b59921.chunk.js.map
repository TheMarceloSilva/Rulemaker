{"version":3,"sources":["code.js","comps/Rule.js","comps/Urls.js","App.js","reportWebVitals.js","index.js"],"names":["processGeos","input","regEx","segments","raw","split","url","seg","replace","cc","urls","includes","push","geos","rules","Object","entries","key","val","str","join","rule","console","log","Rules","props","keys","theData","map","className","vl","Urls","post","index","App","useState","Segment","the","data","setData","onChange","e","target","value","Rule","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAgCeA,EAhCK,SAACC,GACjB,IAAMC,EAAQ,4BACVC,EAAW,CAACC,IAAI,IACpBH,EAAQA,EAAMI,MAAM,MAHO,oBAIZJ,GAJY,IAI3B,IAAI,EAAJ,qBAAqB,CAAC,IAAdK,EAAa,QACbC,EAAMD,EAAIE,QAAQN,EAAO,MACzBO,EAAKH,EAAIE,QAAQN,EAAO,MACzBC,EAASC,IAAIG,GACRJ,EAASC,IAAIG,GAAKG,KAAKC,SAASL,KAChCH,EAASC,IAAIG,GAAKG,KAAKE,KAAKN,GAC5BH,EAASC,IAAIG,GAAKM,KAAKD,KAAKH,IAGhCN,EAASC,IAAIG,GAAO,CAAC,KAAS,CAACD,GAAM,KAAO,CAACG,KAb1B,8BAiB3B,IADA,IAAIK,EAAQ,GACZ,MAAsBC,OAAOC,QAAQb,EAASC,KAA9C,eAAmD,CAA/C,0BAAKa,EAAL,KAAUC,EAAV,KACIC,EAAMF,EAAIT,QAAQ,YAAa,MACnCU,EAAG,KAAH,WAAkBA,EAAIL,KAAKO,KAAK,KAAhC,aAAyCH,EAAzC,iBACGH,EAAMK,GACLL,EAAMK,GAAKP,KAAKM,EAAIG,MAEpBP,EAAMK,GAAK,CAACD,EAAIG,MAKxB,OAFAlB,EAAQ,MAAYW,EACpBQ,QAAQC,IAAIpB,GACLA,G,OCLIqB,MAtBf,SAAgBC,GACZ,IAAMX,EAAQC,OAAOW,KAAKD,EAAME,SAASC,KAAI,SAACX,EAAKC,GACnD,OAAO,sBAAKW,UAAU,SAAf,UACH,mBAAGA,UAAU,MAAb,SAAoBZ,IACnBQ,EAAME,QAAQV,GAAKW,KAAI,SAACE,GACrB,OACI,qBAAKD,UAAU,OAAf,SACKC,aAOjB,OACQ,sBAAKD,UAAU,QAAf,UACI,oBAAIA,UAAU,MAAd,qBACCf,MCgBFiB,MAlCf,SAAeN,GACX,IAAMO,EAAOjB,OAAOW,KAAKD,EAAME,SAASC,KAAI,SAACX,EAAKgB,GAC/C,OACI,gCAAK,mBAAGJ,UAAU,MAAb,SAAoBZ,IACpB,gCACI,6BAECQ,EAAME,QAAQV,GAAKP,KAAKkB,KAAI,SAACtB,EAAK2B,GAC3B,OACI,6BAAK3B,SAIjB,uBACA,gCAQhB,OACQ,sBAAKuB,UAAU,QAAf,UACI,oBAAIA,UAAU,MAAd,iCACA,8BACKG,QCFNE,MAjBf,WACE,MAAwBC,mBAAS,CAAC/B,IAAI,CAACgC,QAAQ,CAAC1B,KAAK,CAAC,eAAgBI,MAAM,CAACuB,IAAI,CAAC,oBAAoB,WAAtG,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACE,sBAAKV,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,UACE,oBAAIA,UAAU,MAAd,kBACA,0BAAUW,SAAU,SAAAC,GAAC,OAAIF,EAAQvC,EAAYyC,EAAEC,OAAOC,cAIpD,cAACC,EAAD,CAAOjB,QAASW,EAAKxB,QACrB,cAAC,EAAD,CAAMa,QAASW,EAAKlC,UCPfyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72b59921.chunk.js","sourcesContent":["const processGeos = (input) => {\r\n    const regEx = /.*ibm.com\\/(..-..)?\\/(.*)/\r\n    let segments = {raw:{}};\r\n    input = input.split(\"\\n\")\r\n    for(let url of input){\r\n        let seg = url.replace(regEx, '$2')\r\n        let cc = url.replace(regEx, '$1')\r\n        if(segments.raw[seg]){\r\n            if(!segments.raw[seg].urls.includes(url)){\r\n                segments.raw[seg].urls.push(url)\r\n                segments.raw[seg].geos.push(cc)\r\n            }\r\n        }else{\r\n            segments.raw[seg] = {'urls' : [url], 'geos':[cc]}\r\n        }\r\n    }\r\n    let rules = {}\r\n    for(let [key, val] of Object.entries(segments.raw)){\r\n        let str = key.replace(/(.*)\\/.*$/, '$1')\r\n        val['rule'] = `(${val.geos.join('|')})/${key}(([\\\\?].*)?$)` \r\n        if(rules[str]){\r\n            rules[str].push(val.rule);\r\n        }else{\r\n            rules[str]=[val.rule]\r\n        }\r\n    }\r\n    segments['rules'] = rules\r\n    console.log(segments)\r\n    return segments\r\n    \r\n}\r\n\r\nexport default processGeos\r\n\r\n","\r\nfunction Rules (props){\r\n    const rules = Object.keys(props.theData).map((key, val) => {       \r\n    return(<div className='ticket'>\r\n        <b className='seg'>{key}</b>\r\n        {props.theData[key].map((vl)=>{\r\n            return(\r\n                <div className='rule'>\r\n                    {vl}\r\n                </div>\r\n            )\r\n        })}\r\n    </div>)}\r\n\r\n    )\r\n    return(\r\n            <div className=\"Rules\">\r\n                <h2 className=\"ttl\"> Rules </h2>\r\n                {rules}\r\n            </div>\r\n    )\r\n} \r\n\r\nexport default Rules;","function Urls (props){\r\n    const post = Object.keys(props.theData).map((key, index) => {\r\n       return(\r\n           <div><b className='seg'>{key}</b>\r\n                <div>\r\n                    <ul>\r\n\r\n                    {props.theData[key].urls.map((url, index) => {\r\n                            return (\r\n                                <li>{url}</li>\r\n                            )\r\n                    })}\r\n                    </ul>\r\n                    <br/>\r\n                    <br/>\r\n                </div>\r\n           </div>\r\n           \r\n           \r\n       ) \r\n    })\r\n\r\n    return (\r\n            <div className=\"slack\">\r\n                <h2 className=\"ttl\">Data for slack post</h2>\r\n                <div>\r\n                    {post}\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Urls;","import { useState } from 'react';\nimport './reset.css';\nimport './App.css';\nimport processGeos from './code';\nimport Rules from './comps/Rule';\nimport Urls from './comps/Urls';\n\nfunction App() {\n  const [data, setData] = useState({raw:{Segment:{urls:['URLS here']}}, rules:{the:['Rules will appear','Here']}})\n\n  return (\n    <div className=\"App\">\n      <div className='input'>\n        <h2 className=\"ttl\">URLs</h2>\n        <textarea onChange={e => setData(processGeos(e.target.value))}>\n \n         </textarea>\n      </div>\n          <Rules theData={data.rules}></Rules>\n          <Urls theData={data.raw}></Urls>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}